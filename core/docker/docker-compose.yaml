version: "2.1"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_DOCKER_TAG}
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka:${CONFLUENT_DOCKER_TAG}
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_HOURS: 6
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_DOCKER_TAG}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"

  kafka-connect-onprem:
    image: confluentinc/cp-enterprise-replicator:${CONFLUENT_DOCKER_TAG}
    container_name: kafka-connect-onprem
    hostname: kafka-connect-onprem
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - 18083:18083
    healthcheck:
      disable: true
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_PORT: 18083
      CONNECT_GROUP_ID: kafka-connect-onprem
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-statuses
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-onprem"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components/"
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-${CONFLUENT_DOCKER_TAG}.jar:/usr/share/java/kafka-connect-replicator/replicator-rest-extension-${CONFLUENT_DOCKER_TAG}.jar
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"
      CONNECT_REST_EXTENSION_CLASSES: io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension
    command:
      - bash
      - -c
      - |
        apt-get -qq update
        apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/*
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:0.10.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.4.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:latest
        cd /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc/lib
        curl -k -SL "http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.37.tar.gz" | tar -xzf -
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        sleep infinity
    volumes:
      - .env:/secrets.properties
      - .data/datagen:/datagen/

  kafka-connect-ccloud:
    image: confluentinc/cp-enterprise-replicator:${CONFLUENT_DOCKER_TAG}
    container_name: kafka-connect-ccloud
    hostname: kafka-connect-ccloud
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - 18084:18084
    healthcheck:
      disable: true
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${CCLOUD_CLUSTER_ENDPOINT}
      CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_SASL_MECHANISM: PLAIN
      CONNECT_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      CONNECT_REST_PORT: 18084
      CONNECT_GROUP_ID: ${DC}-kafka-connect-ccloud
      CONNECT_KAFKA_HEAP_OPTS: "-Xms256M -Xmx4G"
      CONNECT_CONFIG_STORAGE_TOPIC: _${DC}-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _${DC}-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _${DC}-connect-statuses
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-ccloud"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "3"
      CONNECT_CONFIG_STORAGE_PARTITIONS: "1"
      CONNECT_OFFSET_STORAGE_PARTITIONS: "1"
      CONNECT_STATUS_STORAGE_PARTITIONS: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components/"
      # Interceptor config
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-${CONFLUENT_DOCKER_TAG}.jar:/usr/share/java/kafka-connect-replicator/replicator-rest-extension-${CONFLUENT_DOCKER_TAG}.jar
      # Producer config
      CONNECT_PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_PRODUCER_SASL_MECHANISM: PLAIN
      CONNECT_PRODUCER_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      # Consumer config
      CONNECT_CONSUMER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_SSL
      CONNECT_CONSUMER_SASL_MECHANISM: PLAIN
      CONNECT_CONSUMER_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"
      CONNECT_REST_EXTENSION_CLASSES: io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension
    command:
      - bash
      - -c
      - |
        apt-get -qq update
        apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/*
        confluent-hub install --no-prompt confluentinc/kafka-connect-gcs:5.5.5
        confluent-hub install --no-prompt wepay/kafka-connect-bigquery:1.6.1
        confluent-hub install --no-prompt confluentinc/kafka-connect-gcp-bigtable:1.0.7
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.4.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-azure-blob-storage:1.1.1
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:latest
        confluent-hub install --no-prompt confluentinc/kafka-connect-s3:10.0.0
        cd /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc/lib
        curl -k -L "https://s3.amazonaws.com/redshift-downloads/drivers/jdbc/1.2.41.1065/RedshiftJDBC42-no-awssdk-1.2.41.1065.jar" -o RedshiftJDBC42-no-awssdk-1.2.41.1065.jar
        
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run & 
        #
        sleep infinity
    volumes:
      - .env:/secrets.properties
      - .aws/:/home/appuser/.aws

  control-center:
    image: confluentinc/cp-enterprise-control-center:${CONFLUENT_DOCKER_TAG}
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-connect-onprem
      - kafka-connect-ccloud
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_CONNECT_CONNECT-ONPREM_CLUSTER: "http://kafka-connect-onprem:18083"
      CONTROL_CENTER_CONNECT_CONNECT-CCLOUD_CLUSTER: "http://kafka-connect-ccloud:18084"
      CONTROL_CENTER_KSQL_KSQLDB-CCLOUD_URL: "http://ksqldb-server-ccloud:8088"
      CONTROL_CENTER_KSQL_KSQLDB-CCLOUD_ADVERTISED_URL: "http://${EXT_IP}:8088"
      CONTROL_CENTER_KSQL_KSQLDB-ONPREM_URL: "http://ksqldb-server-onprem:8088"
      CONTROL_CENTER_KSQL_KSQLDB-ONPREM_ADVERTISED_URL: "http://${EXT_IP}:18088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_KAFKA_CCLOUD_BOOTSTRAP_SERVERS: ${CCLOUD_CLUSTER_ENDPOINT}
      CONTROL_CENTER_KAFKA_CCLOUD_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      CONTROL_CENTER_KAFKA_CCLOUD_SECURITY_PROTOCOL: SASL_SSL
      CONTROL_CENTER_KAFKA_CCLOUD_SASL_MECHANISM: PLAIN
      CONTROL_CENTER_KAFKA_CCLOUD_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      CONTROL_CENTER_KAFKA_CCLOUD_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REST_AUTHENTICATION_METHOD: BASIC
      CONTROL_CENTER_REST_AUTHENTICATION_REALM: c3
      CONTROL_CENTER_REST_AUTHENTICATION_ROLES: Administrators,Restricted
      CONTROL_CENTER_AUTH_RESTRICTED_ROLES: Restricted
      CONTROL_CENTER_AUTH_SESSION_EXPIRATION_MS: 6000000
      CONTROL_CENTER_OPTS: "-Djava.security.auth.login.config=/tmp/c3/propertyfile.jaas"
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      # Workaround for MMA-3564
      CONTROL_CENTER_METRICS_TOPIC_MAX_MESSAGE_BYTES: 8388608
      PORT: 9021
    volumes:
      - /tmp/c3:/tmp/c3

  ksqldb-server-ccloud:
    image: confluentinc/cp-ksqldb-server:${CONFLUENT_DOCKER_TAG}
    hostname: ksqldb-server-ccloud
    container_name: ksqldb-server-ccloud
    depends_on:
      - schema-registry
      - control-center
      - kafka-connect-ccloud
    ports:
      - "8088:8088"
    environment:
      KSQL_HOST_NAME: ksqldb-server
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j-rolling.properties"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_COMMIT_INTERVAL_MS: 0
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_BOOTSTRAP_SERVERS: ${CCLOUD_CLUSTER_ENDPOINT}
      KSQL_SECURITY_PROTOCOL: SASL_SSL
      KSQL_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      KSQL_SASL_MECHANISM: PLAIN
      KSQL_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KSQL_KSQL_CONNECT_URL: http://kafka-connect-ccloud:18084
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: "earliest"
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*'
      KSQL_KSQL_SERVICE_ID: ${DC}-ksqldbserver_
      KSQL_KSQL_STREAMS_PRODUCER_RETRIES: 2147483647
      KSQL_KSQL_STREAMS_PRODUCER_CONFLUENT_BATCH_EXPIRE_MS: 9223372036854775807
      KSQL_KSQL_STREAMS_PRODUCER_REQUEST_TIMEOUT_MS: 300000
      KSQL_KSQL_STREAMS_PRODUCER_MAX_BLOCK_MS: 9223372036854775807
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 3
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 3
      KSQL_KSQL_SINK_REPLICAS: 3
      # Producer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN
      KSQL_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: "SASL_SSL"
      KSQL_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      # Consumer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN
      KSQL_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: "SASL_SSL"
      KSQL_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: ${CCLOUD_CLUSTER_ENDPOINT}
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_SSL
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="${CCLOUD_API_KEY}" password="${CCLOUD_API_SECRET}";

  ksqldb-server-onprem:
    image: confluentinc/cp-ksqldb-server:${CONFLUENT_DOCKER_TAG}
    hostname: ksqldb-server-onprem
    container_name: ksqldb-server-onprem
    depends_on:
      - schema-registry
      - broker
      - control-center
      - kafka-connect-onprem
    ports:
      - "18088:8088"
    environment:
      KSQL_HOST_NAME: ksqldb-server-onprem
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_KSQL_EXTENSION_DIR: "/etc/ksqldb/ext/"
      KSQL_CUB_KAFKA_TIMEOUT: 120
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j-rolling.properties"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_COMMIT_INTERVAL_MS: 0
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_KSQL_CONNECT_URL: http://kafka-connect-onprem:18083
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: "earliest"
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*'
      KSQL_KSQL_SERVICE_ID: ${DC}-onprem-ksqldbserver_
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_PARTITIONS: 2
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 10000000
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 1
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 1
      KSQL_KSQL_SINK_REPLICAS: 1
      # Producer/Consumer Confluent Monitoring Interceptors for Control Center streams monitoring 
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-${CONFLUENT_DOCKER_TAG}.jar
    healthcheck:
      disable: true

  
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.9.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - kafka-connect-ccloud
      - ksqldb-server-ccloud
    entrypoint: /bin/sh
    tty: true

  workshop-docs:
    container_name: workshop-docs-webserver
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./asciidoc:/usr/share/nginx/html
 
  create-cloud-topics:
    image: confluentinc/cp-kafka:${CONFLUENT_DOCKER_TAG}
    hostname: create-cloud-topics
    container_name: create-cloud-topics
    volumes:
      - ./ccloud.properties:/ccloud.properties
      - ./util_functions.sh:/util_functions.sh
    command: "bash -c 'source /util_functions.sh; create_ccloud_topics ${CCLOUD_TOPICS} ${DC}'"
    environment:
      # The following settings are listed here only to satisfy the image’s requirements.
      # We override the image’s command anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  create-onprem-topics:
    image: confluentinc/cp-kafka:${CONFLUENT_DOCKER_TAG}
    hostname: create-onprem-topics
    container_name: create-onprem-topics
    depends_on:
      - broker
    volumes:
      - ./util_functions.sh:/util_functions.sh
      - ./data/produce-to-topics:/produce-data/
    command:
      - bash
      - -c
      - |
        source /util_functions.sh;
        create_onprem_topics ${ONPREM_TOPICS} "broker:29092"
        preload_onprem_topics ${ONPREM_TOPICS} "broker:29092" "/produce-data"
    environment:
      # The following settings are listed here only to satisfy the image’s requirements.
      # We override the image’s command anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  mysql:
    # *-----------------------------*
    # To connect to the DB:
    #   docker-compose exec mysql bash -c 'mysql -u root -p$MYSQL_ROOT_PASSWORD'
    # *-----------------------------*
    image: debezium/example-mysql:0.9
    container_name: mysql
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - ./data/mysql:/docker-entrypoint-initdb.d/
    healthcheck:
      test: '/usr/bin/mysql --user=root --password=debezium --execute "SHOW DATABASES;"'
      interval: 5s
      timeout: 20s
      retries: 30

  dbtrans-simulator:
    container_name: db-trans-simulator
    depends_on:
      mysql:
        condition: service_healthy
    command: tail -f /dev/null
    build:
      context: ./db_transaction_simulator    